####################################################################################################
# Below is the docker compose file consisting of 6 services within two internal networks
# 1) zookeeper is the one that manages the Kafka brokers - Accessible only WITHIN kafka-cluster net.
# 2) broker01 and broker 02 are two kafka brokers that are accessible both from the host network
# at ports 9092 and 9093 respectively and broker01:29092 and broker01:29093 within kafka-cluster net.
# 3) schema-registry is the service that manages kafka message schemas and versioning. Exposed port
# 8081 accessible on host network.
# 3) cassandra01 and cassandra02 are two cassandra nodes that reside within cassandra-cluster network
# both are also exposed to the host network through the ports 9042 and 9043 for CQLsh connections.
# Cassandra d=configuration tweaks:
# In order to simulate multi host environment and run containers as if they were hosted on different
# machines, we can use aliases for CASSANDRA_BROADCAST_RPC_ADDRESS like 127.0.0.1, 127.0.0.2 etc.
# This is done due to connectivity issues and warning thrown by the datastax driver 4.11
####################################################################################################
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc -w 2 zookeeper 2181" ]
      interval: 5s
      timeout: 10s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=*"
    networks:
      - kafka-cluster
    volumes:
      - "./data/zookeeper01/data:/var/lib/zookeeper/data"
      - "./data/zookeeper01/logs:/var/lib/zookeeper/log"
    user: "0:0"

  broker01:
    image: confluentinc/cp-kafka:latest
    container_name: "broker01"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server broker01:29092 --describe" ]
      interval: 5s
      timeout: 10s
      retries: 3
    ports:
      - "9092:9092"
    networks:
      - kafka-cluster
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092,PLAINTEXT_INTERNAL://broker01:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - ./data/broker01/data:/var/lib/kafka/data
    user: "0:0"

  broker02:
    image: confluentinc/cp-kafka:latest
    container_name: "broker02"
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server broker02:29093 --describe" ]
      interval: 5s
      timeout: 10s
      retries: 3
    ports:
      - "9093:9093"
    networks:
      - kafka-cluster
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9093,PLAINTEXT_INTERNAL://broker02:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - ./data/broker02/data:/var/lib/kafka/data
    user: "0:0"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: 'schema-registry'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker01:29092,PLAINTEXT://broker02:29093'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
    depends_on:
      zookeeper:
        condition: service_healthy
      broker01:
        condition: service_healthy

    ports:
      - '8081:8081'
    networks:
      - kafka-cluster

#  Cassandra
  cassandra01:
    image: datastax/dse-server:6.8.23
    container_name: cassandra01
    hostname: cassandra01
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 5s
      timeout: 5s
      retries: 60
    volumes:
      - ./data/cassandra01/data:/data
    ports:
      - "9042:9042" # Exposes DSE port
      - '7000:7000'
    environment:
      DS_LICENSE: accept # Accept licence on start
      CLUSTER_NAME: 'MilkyWay'
      SEEDS: 'cassandra01'
      NUM_TOKENS: 128
      NATIVE_TRANSPORT_BROADCAST_ADDRESS: '127.0.0.1'
      SNITCH: 'GossipingPropertyFileSnitch'
      DC: 'Moon'
      RACK: 'West'
      JVM_EXTRA_OPTS: '-Xms256m -Xmx512g'
    networks:
      cassandra-cluster:
        ipv4_address: 172.30.0.2
    cap_add:
      - IPC_LOCK # Allow DSE to lock memory with mlock
    ulimits:
      memlock: -1
    depends_on:
      - opscenter

  cassandra02:
    image: datastax/dse-server:6.8.23
    container_name: cassandra02
    hostname: cassandra02
    healthcheck:
      test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
      interval: 5s
      timeout: 5s
      retries: 60
    volumes:
      - ./data/cassandra02/data:/data
    ports:
      - "9043:9042" # Exposes DSE port
      - '7001:7000'
    environment:
      DS_LICENSE: accept # Accept licence on start
      CLUSTER_NAME: 'MilkyWay'
      NATIVE_TRANSPORT_BROADCAST_ADDRESS: '127.0.0.2'
      SEEDS: 'cassandra01'
      NUM_TOKENS: 128
      SNITCH: 'GossipingPropertyFileSnitch'
      DC: 'Moon'
      RACK: 'West'
      JVM_EXTRA_OPTS: '-Xms256m -Xmx512g'
    cap_add:
      - IPC_LOCK # Allow DSE to lock memory with mlock
    ulimits:
      memlock: -1
    networks:
      cassandra-cluster:
        ipv4_address: 172.30.0.3
    depends_on:
       cassandra01:
         condition: service_healthy

networks:
  cassandra-cluster:
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
  kafka-cluster:
    driver: bridge
